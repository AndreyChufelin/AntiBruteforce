// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/AndreyChufelin/AntiBruteforce/internals/storage"

	time "time"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// ClearBucket provides a mock function with given fields: ctx, bucketType, key
func (_m *Storage) ClearBucket(ctx context.Context, bucketType storage.BucketType, key string) error {
	ret := _m.Called(ctx, bucketType, key)

	if len(ret) == 0 {
		panic("no return value specified for ClearBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.BucketType, string) error); ok {
		r0 = rf(ctx, bucketType, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBucket provides a mock function with given fields: ctx, bucketType, key, limit, period
func (_m *Storage) UpdateBucket(ctx context.Context, bucketType storage.BucketType, key string, limit int, period time.Duration) error {
	ret := _m.Called(ctx, bucketType, key, limit, period)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.BucketType, string, int, time.Duration) error); ok {
		r0 = rf(ctx, bucketType, key, limit, period)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
