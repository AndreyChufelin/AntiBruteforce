// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: pb/IPListService.proto

package iplist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IPListService_WhitelistAdd_FullMethodName    = "/iplist.IPListService/WhitelistAdd"
	IPListService_WhitelistDelete_FullMethodName = "/iplist.IPListService/WhitelistDelete"
	IPListService_BlacklistAdd_FullMethodName    = "/iplist.IPListService/BlacklistAdd"
	IPListService_BlacklistDelete_FullMethodName = "/iplist.IPListService/BlacklistDelete"
)

// IPListServiceClient is the client API for IPListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPListServiceClient interface {
	WhitelistAdd(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error)
	WhitelistDelete(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error)
	BlacklistAdd(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error)
	BlacklistDelete(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error)
}

type iPListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPListServiceClient(cc grpc.ClientConnInterface) IPListServiceClient {
	return &iPListServiceClient{cc}
}

func (c *iPListServiceClient) WhitelistAdd(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPListService_WhitelistAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) WhitelistDelete(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPListService_WhitelistDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) BlacklistAdd(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPListService_BlacklistAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPListServiceClient) BlacklistDelete(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, IPListService_BlacklistDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPListServiceServer is the server API for IPListService service.
// All implementations must embed UnimplementedIPListServiceServer
// for forward compatibility.
type IPListServiceServer interface {
	WhitelistAdd(context.Context, *ListRequest) (*Empty, error)
	WhitelistDelete(context.Context, *ListRequest) (*Empty, error)
	BlacklistAdd(context.Context, *ListRequest) (*Empty, error)
	BlacklistDelete(context.Context, *ListRequest) (*Empty, error)
	mustEmbedUnimplementedIPListServiceServer()
}

// UnimplementedIPListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIPListServiceServer struct{}

func (UnimplementedIPListServiceServer) WhitelistAdd(context.Context, *ListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistAdd not implemented")
}
func (UnimplementedIPListServiceServer) WhitelistDelete(context.Context, *ListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistDelete not implemented")
}
func (UnimplementedIPListServiceServer) BlacklistAdd(context.Context, *ListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistAdd not implemented")
}
func (UnimplementedIPListServiceServer) BlacklistDelete(context.Context, *ListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistDelete not implemented")
}
func (UnimplementedIPListServiceServer) mustEmbedUnimplementedIPListServiceServer() {}
func (UnimplementedIPListServiceServer) testEmbeddedByValue()                       {}

// UnsafeIPListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPListServiceServer will
// result in compilation errors.
type UnsafeIPListServiceServer interface {
	mustEmbedUnimplementedIPListServiceServer()
}

func RegisterIPListServiceServer(s grpc.ServiceRegistrar, srv IPListServiceServer) {
	// If the following call pancis, it indicates UnimplementedIPListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IPListService_ServiceDesc, srv)
}

func _IPListService_WhitelistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).WhitelistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPListService_WhitelistAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).WhitelistAdd(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_WhitelistDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).WhitelistDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPListService_WhitelistDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).WhitelistDelete(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_BlacklistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).BlacklistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPListService_BlacklistAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).BlacklistAdd(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPListService_BlacklistDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPListServiceServer).BlacklistDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPListService_BlacklistDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPListServiceServer).BlacklistDelete(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPListService_ServiceDesc is the grpc.ServiceDesc for IPListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iplist.IPListService",
	HandlerType: (*IPListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhitelistAdd",
			Handler:    _IPListService_WhitelistAdd_Handler,
		},
		{
			MethodName: "WhitelistDelete",
			Handler:    _IPListService_WhitelistDelete_Handler,
		},
		{
			MethodName: "BlacklistAdd",
			Handler:    _IPListService_BlacklistAdd_Handler,
		},
		{
			MethodName: "BlacklistDelete",
			Handler:    _IPListService_BlacklistDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/IPListService.proto",
}
